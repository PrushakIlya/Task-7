{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { TYPES, BRAND_FRIDGE, BRAND_LAPTOP, BRAND_TVSET, BRAND_MOBILE } from '../components/vars';\nconst slice = createSlice({\n  name: 'todoSlice',\n  initialState: {\n    todos: ''\n  },\n  reducers: {\n    getBrand(state, action) {\n      let result = [];\n\n      switch (action.payload) {\n        case 'tv-set':\n          state = BRAND_TVSET;\n          break;\n\n        case 'fridge':\n          result = BRAND_FRIDGE;\n          break;\n\n        case 'laptop':\n          result = BRAND_LAPTOP;\n          break;\n\n        case 'mobile phone':\n          result = BRAND_MOBILE;\n          break;\n\n        default:\n          result = [];\n      }\n\n      return result;\n    },\n\n    increment(state, action) {\n      state.todos += action.payload;\n    },\n\n    addTodo(state, action) {\n      console.log(state.todos.push); // console.log(action);\n\n      state.todos.push({\n        id: new Date().toISOString(),\n        text: action.payload,\n        checked: false\n      });\n      console.log(state.todos);\n    },\n\n    btnDelete(state, action) {},\n\n    check(state, action) {}\n\n  }\n});\nexport const {\n  getBrand\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","TYPES","BRAND_FRIDGE","BRAND_LAPTOP","BRAND_TVSET","BRAND_MOBILE","slice","name","initialState","todos","reducers","getBrand","state","action","result","payload","increment","addTodo","console","log","push","id","Date","toISOString","text","checked","btnDelete","check","actions","reducer"],"sources":["/Users/prushak/Sites/innowise_task_8/front_end/src/store/slice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { TYPES, BRAND_FRIDGE, BRAND_LAPTOP, BRAND_TVSET, BRAND_MOBILE } from '../components/vars';\n\nconst slice = createSlice({\n  name: 'todoSlice',\n  initialState: {\n    todos: '',\n  },\n  reducers: {\n    getBrand(state,action){\n      let result = [];\n      switch (action.payload) {\n        case 'tv-set':\n          state = BRAND_TVSET;\n          break;\n        case 'fridge':\n          result = BRAND_FRIDGE;\n          break;\n        case 'laptop':\n          result = BRAND_LAPTOP;\n          break;\n        case 'mobile phone':\n          result = BRAND_MOBILE;\n          break;\n        default:\n          result = [];\n      }\n      return result;\n    },\n    increment(state,action){\n      state.todos+=action.payload\n    },\n    addTodo(state, action) {\n      console.log(state.todos.push);\n      // console.log(action);\n\n      state.todos.push({\n        id: new Date().toISOString(),\n        text: action.payload,\n        checked: false,\n      });\n      console.log(state.todos)\n    },\n    btnDelete(state, action) {},\n    check(state, action) {},\n  },\n});\n\nexport const { getBrand} = slice.actions;\nexport default slice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,KAAT,EAAgBC,YAAhB,EAA8BC,YAA9B,EAA4CC,WAA5C,EAAyDC,YAAzD,QAA6E,oBAA7E;AAEA,MAAMC,KAAK,GAAGN,WAAW,CAAC;EACxBO,IAAI,EAAE,WADkB;EAExBC,YAAY,EAAE;IACZC,KAAK,EAAE;EADK,CAFU;EAKxBC,QAAQ,EAAE;IACRC,QAAQ,CAACC,KAAD,EAAOC,MAAP,EAAc;MACpB,IAAIC,MAAM,GAAG,EAAb;;MACA,QAAQD,MAAM,CAACE,OAAf;QACE,KAAK,QAAL;UACEH,KAAK,GAAGR,WAAR;UACA;;QACF,KAAK,QAAL;UACEU,MAAM,GAAGZ,YAAT;UACA;;QACF,KAAK,QAAL;UACEY,MAAM,GAAGX,YAAT;UACA;;QACF,KAAK,cAAL;UACEW,MAAM,GAAGT,YAAT;UACA;;QACF;UACES,MAAM,GAAG,EAAT;MAdJ;;MAgBA,OAAOA,MAAP;IACD,CApBO;;IAqBRE,SAAS,CAACJ,KAAD,EAAOC,MAAP,EAAc;MACrBD,KAAK,CAACH,KAAN,IAAaI,MAAM,CAACE,OAApB;IACD,CAvBO;;IAwBRE,OAAO,CAACL,KAAD,EAAQC,MAAR,EAAgB;MACrBK,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACH,KAAN,CAAYW,IAAxB,EADqB,CAErB;;MAEAR,KAAK,CAACH,KAAN,CAAYW,IAAZ,CAAiB;QACfC,EAAE,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EADW;QAEfC,IAAI,EAAEX,MAAM,CAACE,OAFE;QAGfU,OAAO,EAAE;MAHM,CAAjB;MAKAP,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACH,KAAlB;IACD,CAlCO;;IAmCRiB,SAAS,CAACd,KAAD,EAAQC,MAAR,EAAgB,CAAE,CAnCnB;;IAoCRc,KAAK,CAACf,KAAD,EAAQC,MAAR,EAAgB,CAAE;;EApCf;AALc,CAAD,CAAzB;AA6CA,OAAO,MAAM;EAAEF;AAAF,IAAcL,KAAK,CAACsB,OAA1B;AACP,eAAetB,KAAK,CAACuB,OAArB"},"metadata":{},"sourceType":"module"}